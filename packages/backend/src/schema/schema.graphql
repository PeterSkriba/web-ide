type Exercise {
  id: ID!
  title: String!
  description: String!
  stdin: [String]!
  stdout: [String]!
}

type Code {
  id: ID!
  user_id: ID!
  exercise_id: ID!
  body: String!
  tests: [Boolean]!
}

type User {
  id: ID!
  username: String!
  first_name: String!
  last_name: String!
  email: String!
}

type Query {
  code(user_id: ID!, exercise_id: ID!): Code
  user(id: ID!): User
  exercise(id: ID!): Exercise
}

input createCodeInput {
  user_id: ID
  exercise_id: ID
  body: String
  tests: [Boolean]
}

input createExerciseInput {
  title: String
  description: String
  stdin: [String]
  stdout: [String]
}

input createUserInput {
  username: String
  first_name: String
  last_name: String
  email: String
}

type Mutation {
  createUser(data: createUserInput!): User
  createCode(data: createCodeInput!): Code
  createExercise(data: createExerciseInput!): Exercise
}